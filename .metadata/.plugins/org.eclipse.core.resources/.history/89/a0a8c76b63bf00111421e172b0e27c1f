package cusine.restaurant.finder;

import java.util.ArrayList;
import java.util.List;

import sqlite.list.project.MySQLiteHelper;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class CuisinesDataSource {
	
	private SQLiteDatabase database;
	private MySQLiteHelper dbHelper;
	private String[] allColumns = { MySQLiteHelper.COLUMN_CUISINE_ID,
			MySQLiteHelper.COLUMN_CUISINE_NAME };
	
	public CuisinesDataSource(Context context) {
		// TODO Auto-generated constructor stub
		dbHelper = new MySQLiteHelper(context);
	}
	
	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}

	public void close() {
		dbHelper.close();
	}

	public Cuisines createCuisines(String cuisinename, int cuisineid) {
		ContentValues values = new ContentValues();
		values.put(MySQLiteHelper.COLUMN_CUISINE_NAME, cuisinename);
		values.put(MySQLiteHelper.COLUMN_CUISINE_ID, cuisineid);
		long insertId = database.insert(MySQLiteHelper.TABLE_CUISINES, null,
				values);
		Cursor cursor = database.query(MySQLiteHelper.TABLE_CUISINES,
				allColumns, null, null, null, null, null);
		cursor.moveToFirst();
		Cuisines newComment = cursorToCuisines(cursor);
		cursor.close();
		return newComment;
	}

	public void deleteCuisines(Cuisines Cuisines) {
		int id = Cuisines.getCuisine_id();
		System.out.println("Cuisines deleted with id: " + id);
		database.delete(MySQLiteHelper.TABLE_CUISINES, MySQLiteHelper.COLUMN_CUISINE_ID
				+ " = " + id, null);
	}

	public List<Cuisines> getAllCuisiness() {
		List<Cuisines> Cuisiness = new ArrayList<Cuisines>();

		Cursor cursor = database.query(MySQLiteHelper.TABLE_CuisinesS,
				allColumns, null, null, null, null, null);

		cursor.moveToFirst();
		while (!cursor.isAfterLast()) {
			Cuisines Cuisines = cursorToCuisines(cursor);
			Cuisiness.add(Cuisines);
			cursor.moveToNext();
		}
		// Make sure to close the cursor
		cursor.close();
		return Cuisiness;
	}

	private Cuisines cursorToCuisines(Cursor cursor) {
		Cuisines Cuisines = new Cuisines();
		Cuisines.setId(cursor.getLong(0));
		Cuisines.setEmpName(cursor.getString(1));
		Cuisines.setAge(cursor.getInt(2));
		return Cuisines;
	}


}

/*
package sqlite.list.project;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;

public class CuisinesDataSource {
	
	private SQLiteDatabase database;
	private MySQLiteHelper dbHelper;
	private String[] allColumns = { MySQLiteHelper.COLUMN_ID,
			MySQLiteHelper.COLUMN_EMPNAME, MySQLiteHelper.COLUMN_AGE };
	
	public CuisinesDataSource(Context context) {
		// TODO Auto-generated constructor stub
		dbHelper = new MySQLiteHelper(context);
	}
	
	public void open() throws SQLException {
		database = dbHelper.getWritableDatabase();
	}

	public void close() {
		dbHelper.close();
	}

	public Cuisines createCuisines(String empname, int age) {
		ContentValues values = new ContentValues();
		values.put(MySQLiteHelper.COLUMN_EMPNAME, empname);
		values.put(MySQLiteHelper.COLUMN_AGE, age);
		long insertId = database.insert(MySQLiteHelper.TABLE_CuisinesS, null,
				values);
		Cursor cursor = database.query(MySQLiteHelper.TABLE_CuisinesS,
				allColumns, MySQLiteHelper.COLUMN_ID + " = " + insertId, null,
				null, null, null);
		cursor.moveToFirst();
		Cuisines newComment = cursorToCuisines(cursor);
		cursor.close();
		return newComment;
	}

	public void deleteCuisines(Cuisines Cuisines) {
		long id = Cuisines.getId();
		System.out.println("Cuisines deleted with id: " + id);
		database.delete(MySQLiteHelper.TABLE_CuisinesS, MySQLiteHelper.COLUMN_ID
				+ " = " + id, null);
	}

	public List<Cuisines> getAllCuisiness() {
		List<Cuisines> Cuisiness = new ArrayList<Cuisines>();

		Cursor cursor = database.query(MySQLiteHelper.TABLE_CuisinesS,
				allColumns, null, null, null, null, null);

		cursor.moveToFirst();
		while (!cursor.isAfterLast()) {
			Cuisines Cuisines = cursorToCuisines(cursor);
			Cuisiness.add(Cuisines);
			cursor.moveToNext();
		}
		// Make sure to close the cursor
		cursor.close();
		return Cuisiness;
	}

	private Cuisines cursorToCuisines(Cursor cursor) {
		Cuisines Cuisines = new Cuisines();
		Cuisines.setId(cursor.getLong(0));
		Cuisines.setEmpName(cursor.getString(1));
		Cuisines.setAge(cursor.getInt(2));
		return Cuisines;
	}

}

*/